cd ~                         #Переход на домашнюю директорию
cd SomeProject               #Переход на файл в текущей директории
cd ..                        #Переход на директорию ниже
cd ~/UserName/SomeProject    #Переход на несколько файлов ниже

ls                           #Показать все папки в этой директории, кроме скрытых
ls -a                        #Показать все папки в этой директории, включая скрытые

touch SomeFile.txt           #Создание файла в директории

mkdir SomeDir                #Создание директории(папки)

rm SomeFile.txt              #Удаление файла
rmdir SomeEmptyDir           #Удаление пустой директории
rm -r SomeNotEmptyDir        #Удаление НЕпустой директории

git init                     #Инициализация git в директории(возможность пользоваться им)
git remote add origin RepositoryInGit
                             #Связать главный удаленный и локальный репозитории
git remote -v                #Проверка, связались ли репозитории

git status                   #показывает текущее состояние файлов(неотслеживаемые, отслеживаемые, измененные)
git log                      #подробная история коммитов
git log --oneline            #история коммитов в удобном формате
```
Рабочий каталог (Working Directory):
Это место, где вы работаете с вашими файлами. Здесь вы создаёте, редактируете и удаляете файлы. Тут неотслеживаемые (Untracked)
и несохраненные измененные (not staged modified) файлы

Индекс (Staging Area):
Это промежуточная область, где вы подготавливаете ваши изменения к коммиту. Вы выбираете, какие изменения хотите включить в следующий коммит.
Тут отслеживаемые и сохраненные измененные (modified) файлы

Репозиторий (Repository):
Это место, где хранятся все зафиксированные изменения (коммиты).
```

git add SomeFile.txt         #Начать отслеживать файл

git restore SomeFile.txt     #Перестать отслеживать файл, откатив изменения до последнего сохранения add или commit
git restore --staged SomeFile.txt
                             #Перестать отслеживать файл, при этом не меняя файл в рабочем каталоге

git commit -m "Some message about commit"
                             #Сохранение текущего состояния отслеживаемых файлов
git commit --amend --no-edit
                             #Изменение последнего коммита добавлением новых отслеживаемых файлов без изменения сообщения
git commit --amend -m "NewMessage"
                             #Изменение последнего коммита добавлением новых отслеживаемых файлов с новым сообщением

git reset --hard <commit hash>
                             #Откат к указанному коммиту с последующим удалением всех потомков коммита

git push -u RepositoryInGit BranchName
                             #Первое сохранение изменений в удаленном репозитории
git push                     #Последующие сохранения изменений в удаленном репозитории

git clone RepositoryInGit OptionalNewName
                             #клонирование удаленного репозитория в локальный

git diff                     #Сравнивает последнюю закоммиченную версию файла с той, что находится в состоянии modified.(git add не было)
git diff --staged            #Показывает изменения в staged-файлах относительно последних закоммиченных версий.
git diff SomeHash123 HEAD    #Сравнивает последний коммит (всегда называется HEAD) с некоторым указанным

git branch                   #Показывает, на какой ветке находишься
git checkout Branchname      #Переход к другой ветке Branchname
git checkout -b Branchname   #Переход к другой новосозданной ветке Branchname

git fetch origin             #Загружает изменения с удаленного репозитория в локальный репозиторий, но не вносит их в вашу текущую ветку.
git merge origin/main        #Объединяет изменения из одной ветки в другую. Обычно используется для слияния изменений из одной ветки в текущую ветку.
git pull origin main         #Комбинирует git fetch и git merge. Загружает изменения с удаленного репозитория и сразу же сливает их в вашу текущую ветку.
git pull origin main --allow-unrelated-histories
                             #Если ветки не имеют общего предка
echo "Some code or message" >> SomeFile.txt
                             #Добавление в конец файла текста
echo "Some code or message" > SomeFile.txt
                             #Замена всего текста(кода) в файле на текст

git mv SomeFile.txt NewNameSomeFile.txt
                             #Переименование файла

git stash save "Message"
                             #Сохранит все незакоммиченные изменения (как изменения в файлах, так и новые файлы) в стэш (мини-коммит)
и вернет рабочую директорию в чистое состояние.
git stash list               #Покажет все сохраненные стэши
git stash apply stash{Num}   #Применит изменения из указанного сохраненного стэша обратно в рабочую директорию
git stash drop stash@{2}     #Удалит стэш
git stash clear              #Удалит все стэши
git stash --keep-index       #Сохранит только изменения, не добавленные в индекс.